{"version":3,"sources":["Surface.js","Test.jsx","App.jsx","serviceWorker.js","index.js"],"names":["material","MeshBasicMaterial","Surface","width","height","color","position","rotation","Component","arguments","length","undefined","Object","classCallCheck","this","element","document","createElement","style","concat","opacity","background","object","CSS3DObject","copy","geometry","PlaneBufferGeometry","mesh","Mesh","glScene","cssScene","add","render","react_default","a","Test","onClick","alert","App","app","createRef","useEffect","camera","THREE","window","innerWidth","innerHeight","set","surfaces","Math","PI","_i","surface","load","glRenderer","setPixelRatio","devicePixelRatio","setSize","current","appendChild","domElement","cssRenderer","top","animate","requestAnimationFrame","className","ref","Boolean","location","hostname","match","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAIMA,EAAW,IAAIC,IAEAC,aACnB,SAAAA,EAAYC,EAAOC,EAAQC,EAAOC,EAAUC,GAA4B,IAAlBC,EAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAAMG,OAAAC,EAAA,EAAAD,CAAAE,KAAAZ,GACtEY,KAAKC,QAAUC,SAASC,cAAc,OACtCH,KAAKC,QAAQG,MAAMf,MAAnB,GAAAgB,OAA8BhB,EAA9B,MACAW,KAAKC,QAAQG,MAAMd,OAAnB,GAAAe,OAA+Bf,EAA/B,MACAU,KAAKC,QAAQG,MAAME,QAAU,EAC7BN,KAAKC,QAAQG,MAAMG,WAAahB,EAEhCS,KAAKQ,OAAS,IAAIC,IAAYT,KAAKC,SACnCD,KAAKQ,OAAOhB,SAASkB,KAAKlB,GAC1BQ,KAAKQ,OAAOf,SAASiB,KAAKjB,GAE1BO,KAAKW,SAAW,IAAIC,IAAoBvB,EAAOC,GAC/CU,KAAKa,KAAO,IAAIC,IAAKd,KAAKW,SAAUzB,GACpCc,KAAKa,KAAKrB,SAASkB,KAAKV,KAAKQ,OAAOhB,UACpCQ,KAAKa,KAAKpB,SAASiB,KAAKV,KAAKQ,OAAOf,UAEpCO,KAAKN,UAAYA,mDAGdqB,EAASC,GACZD,EAAQE,IAAIjB,KAAKa,MACjBG,EAASC,IAAIjB,KAAKQ,yCAIK,OAAnBR,KAAKN,WACPwB,iBAAOC,EAAAC,EAAAjB,cAAAH,KAAMN,UAAN,MAAoBM,KAAKC,kBC/BvB,SAASoB,IAKtB,OACEF,EAAAC,EAAAjB,cAAA,WACEgB,EAAAC,EAAAjB,cAAA,yBACAgB,EAAAC,EAAAjB,cAAA,gBAEAgB,EAAAC,EAAAjB,cAAA,UAAQmB,QARC,kBAAMC,MAAM,QAQrB,mBCiDSC,MAvDf,WACE,IAAMC,EAAMC,sBAgDZ,OA9CAC,oBAAU,WACR,IAAMC,EAAS,IAAIC,IAAwB,GAAIC,OAAOC,WAAYD,OAAOE,YAAa,EAAG,KACzFJ,EAAOpC,SAASyC,IAAI,EAAG,GAAK,MAE5B,IAAIJ,IAAoBD,GAExB,IAAMb,EAAU,IAAIc,IACpBd,EAAQR,WAAa,IAAIsB,IAAY,UAWrC,IAVA,IAAMb,EAAW,IAAIa,IAEfK,EAAW,CACf,IAAI9C,EAAQ,IAAM,IAAM,YAAa,IAAIyC,IAAc,IAAK,GAAI,KAAM,IAAIA,IAAY,GAAIM,KAAKC,GAAK,EAAG,GAAIf,GAC3G,IAAIjC,EAAQ,IAAM,IAAM,kBAAmB,IAAIyC,IAAc,EAAG,EAAG,GAAI,IAAIA,IAAY,EAAGM,KAAKC,GAAI,GAAIf,GACvG,IAAIjC,EAAQ,IAAM,IAAM,WAAY,IAAIyC,KAAe,IAAK,GAAI,KAAM,IAAIA,IAAY,EAAGM,KAAKC,GAAK,EAAG,GAAIf,GAC1G,IAAIjC,EAAQ,IAAM,IAAM,mBAAoB,IAAIyC,IAAc,EAAG,KAAM,KAAM,IAAIA,IAAYM,KAAKC,GAAK,EAAG,EAAGD,KAAKC,IAAKf,GACvH,IAAIjC,EAAQ,IAAM,IAAM,gBAAiB,IAAIyC,IAAc,GAAI,KAAM,KAAM,IAAIA,IAAYM,KAAKC,GAAK,EAAGD,KAAKC,GAAI,GAAIf,IAGvHgB,EAAA,EAAAA,EAAsBH,EAAtBtC,OAAAyC,IAAgC,CAA3B,IAAMC,EAAWJ,EAAJG,GAChBC,EAAQC,KAAKxB,EAASC,GACtBsB,EAAQpB,SAGV,IAAMsB,EAAa,IAAIX,IACvBW,EAAWC,cAAcX,OAAOY,kBAChCF,EAAWG,QAAQb,OAAOC,WAAYD,OAAOE,aAC7CP,EAAImB,QAAQC,YAAYL,EAAWM,YAEnC,IAAMC,EAAc,IAAIlB,IACxBkB,EAAYJ,QAAQb,OAAOC,WAAYD,OAAOE,aAC9Ce,EAAYD,WAAW1C,MAAMZ,SAAW,WACxCuD,EAAYD,WAAW1C,MAAM4C,IAAM,EACnCvB,EAAImB,QAAQC,YAAYE,EAAYD,YAEpB,SAAVG,IACJC,sBAAsBD,GACtBT,EAAWtB,OAAOH,EAASa,GAC3BmB,EAAY7B,OAAOF,EAAUY,GAG/BqB,IAEC,IAKD9B,EAAAC,EAAAjB,cAAA,OAAKgD,UAAU,MAAMC,IAAK3B,KC5CV4B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASvC,OAAOC,EAAAC,EAAAjB,cAACuD,EAAD,MAASxD,SAASyD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.763bf5dd.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { MeshBasicMaterial, CSS3DObject, PlaneBufferGeometry, Mesh } from 'three-full';\r\n\r\nconst material = new MeshBasicMaterial();\r\n\r\nexport default class Surface {\r\n  constructor(width, height, color, position, rotation, Component = null) {\r\n    this.element = document.createElement('div');\r\n    this.element.style.width = `${width}px`;\r\n    this.element.style.height = `${height}px`;\r\n    this.element.style.opacity = 1;\r\n    this.element.style.background = color;\r\n\r\n    this.object = new CSS3DObject(this.element);\r\n    this.object.position.copy(position);\r\n    this.object.rotation.copy(rotation);\r\n\r\n    this.geometry = new PlaneBufferGeometry(width, height);\r\n    this.mesh = new Mesh(this.geometry, material);\r\n    this.mesh.position.copy(this.object.position);\r\n    this.mesh.rotation.copy(this.object.rotation);\r\n\r\n    this.Component = Component;\r\n  }\r\n\r\n  load(glScene, cssScene) {\r\n    glScene.add(this.mesh);\r\n    cssScene.add(this.object);\r\n  }\r\n\r\n  render() {\r\n    if (this.Component !== null)\r\n      render(<this.Component />, this.element);\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default function Test() {\r\n\r\n  const test = () => alert('hi');\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>hello world</h1>\r\n      <h2>Hi</h2>\r\n\r\n      <button onClick={test}>Click me</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { createRef, useEffect } from 'react';\nimport * as THREE from 'three-full';\nimport Surface from './Surface';\nimport Test from './Test.jsx';\nimport './App.css';\n\nfunction App() {\n  const app = createRef();\n\n  useEffect(() => {\n    const camera = new THREE.PerspectiveCamera(90, window.innerWidth, window.innerHeight, 1, 5000);\n    camera.position.set(0, 0 , -1500);\n\n    new THREE.OrbitControls(camera);\n\n    const glScene = new THREE.Scene();\n    glScene.background = new THREE.Color(0xf0f0f0);\n    const cssScene = new THREE.Scene();\n\n    const surfaces = [\n      new Surface(1000, 1000, 'CHOCOLATE', new THREE.Vector3(500, 0, -500), new THREE.Euler(0, -Math.PI / 2, 0), Test),\n      new Surface(1000, 1000, 'MEDIUMVIOLETRED', new THREE.Vector3(0, 0, 0), new THREE.Euler(0, Math.PI, 0), Test),\n      new Surface(1000, 1000, 'LAVENDER', new THREE.Vector3(-500, 0, -500), new THREE.Euler(0, Math.PI / 2, 0), Test),\n      new Surface(1000, 1000, 'MEDIUMAQUAMARINE', new THREE.Vector3(0, 500, -500), new THREE.Euler(Math.PI / 2, 0, Math.PI), Test),\n      new Surface(1000, 1000, 'LAVENDERBLUSH', new THREE.Vector3(0, -500, -500), new THREE.Euler(Math.PI / 2, Math.PI, 0), Test)\n    ];\n\n    for (const surface of surfaces) {\n      surface.load(glScene, cssScene);\n      surface.render();\n    }\n\n    const glRenderer = new THREE.WebGLRenderer();\n    glRenderer.setPixelRatio(window.devicePixelRatio);\n    glRenderer.setSize(window.innerWidth, window.innerHeight);\n    app.current.appendChild(glRenderer.domElement);\n\n    const cssRenderer = new THREE.CSS3DRenderer();\n    cssRenderer.setSize(window.innerWidth, window.innerHeight);\n    cssRenderer.domElement.style.position = 'absolute';\n    cssRenderer.domElement.style.top = 0;\n    app.current.appendChild(cssRenderer.domElement);\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      glRenderer.render(glScene, camera);\n      cssRenderer.render(cssScene, camera);\n    };\n\n    animate();\n\n  }, []);\n\n  \n\n  return (\n    <div className=\"App\" ref={app}>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}