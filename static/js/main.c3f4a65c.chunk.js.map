{"version":3,"sources":["assets/glb/room.glb","scCamera.js","Surface.js","Test.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SCCamera","Object","classCallCheck","this","camera","PerspectiveCamera","window","innerWidth","innerHeight","goToOverview","position","set","rotation","reset","z","y","Math","PI","surface","fov","_Math","degToRad","dist","height","tan","worldPosition","Vector3","mesh","getWorldPosition","endPosition","getWorldDirection","multiplyScalar","add","startPosition","clone","startRotation","copy","lookAt","endRotation","material","MeshBasicMaterial","opacity","color","side","DoubleSide","blending","NoBlending","Surface","width","Component","cameraView","setCameraView","element","document","createElement","style","concat","object","CSS3DObject","geometry","PlaneBufferGeometry","Mesh","castShadow","receiveShadow","render","glScene","cssScene","react_default","a","Test","props","cameraViewIsHere","cameraViewIsOverview","className","onClick","alert","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","appContent","createRef","surfaces","scCamera","bind","assertThisInitialized","setState","_this2","THREE","bgScene","emissive","specular","flatShading","shininess","cube","x","load","roomGLB","gltf","scene","scale","pointLight","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","bgRenderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","top","left","current","appendChild","cssRenderer","glRenderer","pointerEvents","animate","time","requestAnimationFrame","update","prevProps","prevState","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","goToSurface","nextProps","nextState","_this3","ref","Boolean","location","hostname","match","ReactDOM","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3f4a65c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/room.876c2022.glb\";","import { PerspectiveCamera, Vector3, _Math } from 'three-full';\r\nimport { Tween } from 'es6-tween';\r\n\r\nexport default class SCCamera {\r\n  constructor() {\r\n    this.camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 5000);\r\n    this.goToOverview();\r\n  }\r\n\r\n  reset() {\r\n    this.camera.position.set(0, 0, 0);\r\n    this.camera.rotation.set(0, 0, 0);\r\n  }\r\n\r\n  goToOverview() {\r\n    this.reset();\r\n    this.camera.position.z = -1800;\r\n    this.camera.rotation.y = Math.PI;\r\n  }\r\n\r\n  goToSurface(surface) {\r\n    if (surface === null) {\r\n      this.goToOverview();\r\n      return;\r\n    }\r\n\r\n    const fov = _Math.degToRad(this.camera.fov);\r\n    const dist = (surface.height + 200) / (2 * Math.tan(fov / 2));\r\n\r\n    const worldPosition = new Vector3();\r\n    surface.mesh.getWorldPosition(worldPosition);\r\n\r\n    const endPosition = new Vector3();\r\n    surface.mesh.getWorldDirection(endPosition);\r\n    endPosition.multiplyScalar(dist);\r\n    endPosition.add(worldPosition);\r\n\r\n    const startPosition = this.camera.position.clone();\r\n    const startRotation = this.camera.rotation.clone();\r\n\r\n    this.camera.position.copy(endPosition);\r\n    this.camera.lookAt(worldPosition);\r\n    const endRotation = this.camera.rotation.clone();\r\n\r\n    this.camera.position.copy(startPosition);\r\n    this.camera.rotation.copy(startRotation);\r\n\r\n    // TWEEN\r\n    /*const t1 = new Tween(this.camera.position).to({\r\n      x: endPosition.x,\r\n      y: endPosition.y,\r\n      z: endPosition.z\r\n    }, 1000).start();\r\n\r\n    const t2 = new Tween(this.camera.rotation).to({\r\n      x: endRotation.x,\r\n      y: endRotation.y,\r\n      z: endRotation.z\r\n    }, 1000).start();*/\r\n\r\n    this.camera.position.copy(endPosition);\r\n    this.camera.rotation.copy(endRotation);\r\n  }\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { MeshBasicMaterial, DoubleSide, CSS3DObject, PlaneBufferGeometry, Mesh, NoBlending } from 'three-full';\r\n\r\nconst material = new MeshBasicMaterial({\r\n  opacity: 0,\r\n  color: 0x000000,\r\n  side: DoubleSide,\r\n  blending: NoBlending\r\n});\r\n\r\nexport default class Surface {\r\n  constructor(width, height, position, rotation, Component, cameraView, setCameraView) {\r\n    this.width = width;\r\n    this.height = height;\r\n\r\n    this.element = document.createElement('div');\r\n    this.element.style.width = `${width}px`;\r\n    this.element.style.height = `${height}px`;\r\n    this.element.style.opacity = 1;\r\n\r\n    this.object = new CSS3DObject(this.element);\r\n    this.object.position.copy(position);\r\n    this.object.rotation.copy(rotation);\r\n\r\n    this.Component = Component;\r\n    this.cameraView = cameraView;\r\n    this.setCameraView = setCameraView;\r\n\r\n    this.geometry = new PlaneBufferGeometry(width, height);\r\n    this.mesh = new Mesh(this.geometry, material);\r\n    this.mesh.position.copy(position);\r\n    this.mesh.rotation.copy(rotation);\r\n    this.mesh.castShadow = false;\r\n    this.mesh.receiveShadow = true;\r\n  }\r\n\r\n  update(cameraView) {\r\n    this.cameraView = cameraView;\r\n    this.render();\r\n  }\r\n\r\n  load(glScene, cssScene) {\r\n    glScene.add(this.mesh);\r\n    cssScene.add(this.object);\r\n  }\r\n\r\n  render() {\r\n    if (this.Component !== null)\r\n      render(<this.Component cameraView={this.cameraView} setCameraView={this.setCameraView} surface={this} />, this.element);\r\n  }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Test.css';\r\n\r\nfunction Test(props) {\r\n  const cameraViewIsHere = props.cameraView === props.surface;\r\n  const cameraViewIsOverview = props.cameraView === null;\r\n\r\n  return (\r\n    <div className=\"test\">\r\n      <div className={`test__content ${!cameraViewIsHere ? 'test__content--no-pointer' : ''}`}>\r\n        <h1>Hello World</h1>\r\n        {cameraViewIsHere &&\r\n          <h3>Camera is here</h3>\r\n        }\r\n        <button onClick={() => alert(\"Hello World\")}>Click me</button>\r\n      </div>\r\n      <div\r\n        className={`test__overlay ${!cameraViewIsOverview ? 'test__overlay--hidden' : ''}`}\r\n        onClick={() => props.setCameraView(props.surface)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nTest.propTypes = {\r\n  cameraView: PropTypes.object,\r\n  setCameraView: PropTypes.func.isRequired,\r\n  surface: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Test;\r\n","import React, { Component, createRef } from 'react';\nimport * as THREE from 'three-full';\nimport TWEEN, { update } from 'es6-tween';\nimport SCCamera from './scCamera.js';\nimport Surface from './Surface';\nimport Test from './Test.jsx';\nimport roomGLB from './assets/glb/room.glb';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cameraView: null\n    };\n\n    this.appContent = createRef();\n    this.surfaces = [];\n    this.scCamera = new SCCamera();\n    this.setCameraView = this.setCameraView.bind(this);\n  }\n\n  setCameraView(cameraView) {\n    this.setState({cameraView});\n  }\n\n  componentDidMount() {\n    //new THREE.OrbitControls(scCamera.camera);\n\n    const glScene = new THREE.Scene();\n    const bgScene = new THREE.Scene();\n    const cssScene = new THREE.Scene();\n    \n    // cube\n    const geometry = new THREE.BoxGeometry(200, 200, 200);\n    const material = new THREE.MeshPhongMaterial({\n      color: 0xff0000,\n      emissive: 0x000000,\n      specular: 0x111111,\n      side: THREE.DoubleSide,\n      flatShading: false,\n      shininess: 30,\n    });\n    const cube = new THREE.Mesh(geometry, material);\n    cube.position.z = -250;\n    cube.position.x = 250;\n    cube.position.y = 250;\n    cube.castShadow = true;\n    cube.receiveShadow = false;\n    glScene.add(cube);\n\n    var loader = new THREE.GLTFLoader();\n    loader.load(roomGLB, function (gltf) {\n      gltf.scene.scale.multiplyScalar(100);\n      gltf.scene.rotation.y = Math.PI;\n      gltf.scene.position.y = -500;\n      gltf.scene.position.z = -500;\n      gltf.scene.receiveShadow = true;\n      bgScene.add(gltf.scene);\n    });\n\n    // light\n    const pointLight = new THREE.PointLight(0xffffff, 0.8, 0, 2);\n    pointLight.castShadow = true;\n    pointLight.position.z = -1000;\n    glScene.add(pointLight);\n    bgScene.add(new THREE.PointLight().copy(pointLight));\n    //const sphereSize = 100;\n    //const pointLightHelper = new THREE.PointLightHelper( pointLight, sphereSize );\n    //glScene.add( pointLightHelper );\n\n    this.surfaces = [\n      new Surface(1000, 1000, new THREE.Vector3(500, 0, -500), new THREE.Euler(0, -Math.PI / 2, 0), Test, this.state.cameraView, this.setCameraView),\n      new Surface(1000, 1000, new THREE.Vector3(0, 0, 0), new THREE.Euler(0, Math.PI, 0), Test, this.state.cameraView, this.setCameraView),\n      new Surface(1000, 1000, new THREE.Vector3(-500, 0, -500), new THREE.Euler(0, Math.PI / 2, 0), Test, this.state.cameraView, this.setCameraView),\n      new Surface(1000, 1000, new THREE.Vector3(0, -500, -500), new THREE.Euler(Math.PI / 2, Math.PI, 0), Test, this.state.cameraView, this.setCameraView)\n    ];\n    for (const surface of this.surfaces) {\n      surface.load(glScene, cssScene);\n      surface.render();\n    }\n\n    const bgRenderer = new THREE.WebGLRenderer({ alpha: true });\n    bgRenderer.setClearColor(0x000000, 0);\n    bgRenderer.setPixelRatio(window.devicePixelRatio);\n    bgRenderer.setSize(window.innerWidth, window.innerHeight);\n    bgRenderer.domElement.style.position = 'absolute';\n    bgRenderer.domElement.style.top = 0;\n    bgRenderer.domElement.style.left = 0;\n    this.appContent.current.appendChild(bgRenderer.domElement);\n\n    const cssRenderer = new THREE.CSS3DRenderer();\n    cssRenderer.setSize(window.innerWidth, window.innerHeight);\n    cssRenderer.domElement.style.position = 'absolute';\n    cssRenderer.domElement.style.top = 0;\n    cssRenderer.domElement.style.left = 0;\n    this.appContent.current.appendChild(cssRenderer.domElement);\n\n    const glRenderer = new THREE.WebGLRenderer({ alpha: true });\n    glRenderer.setClearColor(0x000000, 0);\n    glRenderer.setPixelRatio(window.devicePixelRatio);\n    glRenderer.setSize(window.innerWidth, window.innerHeight);\n    glRenderer.domElement.style.position = 'absolute';\n    glRenderer.domElement.style.top = 0;\n    glRenderer.domElement.style.left = 0;\n    glRenderer.domElement.style.pointerEvents = 'none';\n    this.appContent.current.appendChild(glRenderer.domElement);\n\n    const animate = (time) => {\n      requestAnimationFrame(animate);\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      bgRenderer.render(bgScene, this.scCamera.camera);\n      cssRenderer.render(cssScene, this.scCamera.camera);\n      glRenderer.render(glScene, this.scCamera.camera);\n      update(time);\n    };\n\n    animate();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.cameraView === this.state.cameraView) return;\n\n    for (const surface of this.surfaces) {\n      surface.update(this.state.cameraView);\n    }\n    this.scCamera.goToSurface(this.state.cameraView);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.cameraView !== this.state.cameraView) return true;\n    return false;\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app__content\" ref={this.appContent} />\n        <div className=\"app__overlay\">\n          {this.state.cameraView !== null &&\n            <button onClick={() => this.setState({cameraView: null})}>Overview</button>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}